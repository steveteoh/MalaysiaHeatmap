var _0x5dc2bc = _0x2af8; (function (_0x5b17f6, _0x4440f9) { var _0x4abf07 = _0x2af8, _0x14734f = _0x5b17f6(); while (!![]) { try { var _0x3adbde = parseInt(_0x4abf07(0x221)) / 0x1 + -parseInt(_0x4abf07(0x220)) / 0x2 * (-parseInt(_0x4abf07(0x229)) / 0x3) + parseInt(_0x4abf07(0x211)) / 0x4 + parseInt(_0x4abf07(0x209)) / 0x5 + -parseInt(_0x4abf07(0x23c)) / 0x6 * (parseInt(_0x4abf07(0x1f8)) / 0x7) + -parseInt(_0x4abf07(0x22a)) / 0x8 + -parseInt(_0x4abf07(0x20f)) / 0x9 * (parseInt(_0x4abf07(0x22b)) / 0xa); if (_0x3adbde === _0x4440f9) break; else _0x14734f['push'](_0x14734f['shift']()); } catch (_0x45c1d5) { _0x14734f['push'](_0x14734f['shift']()); } } }(_0x38b7, 0xcea1e)); var map = null, geocoder = null, myfeature = {}, mygeometry = {}, locations = [], gridWidth = 0x1f4, bounds = null, markers = [], places = [], lt1 = 0x0, ln1 = 0x0, pos = {}, stateRequestURL = _0x5dc2bc(0x23a), districtRequestURL = 'https://steveteoh.github.io/Hex4/Selangor/daerah/subang_jaya.json', inputURL = 'https://steveteoh.github.io/Hex4/Selangor/daerah/subang_jaya.csv', mapID = _0x5dc2bc(0x1ee); const PLACE_BOUNDS = { 'name': _0x5dc2bc(0x1ee), 'north': 3.085027, 'south': 2.976325, 'west': 101.549597, 'east': 101.730601 }, grey = _0x5dc2bc(0x1f9), green = _0x5dc2bc(0x239), yellow = _0x5dc2bc(0x207), orange = _0x5dc2bc(0x1f5), red = _0x5dc2bc(0x1f0), medred = 'rgb(204,\x200,\x200)', purple = _0x5dc2bc(0x218), greenlevel = 0xa, yellowlevel = 0x32, orangelevel = 0x63, redlevel = 0xc7, medredlevel = 0x12b, SQRT3 = 1.7320508075688772; $(window)['load'](function () { var _0x5a6e77 = _0x5dc2bc; bounds = new google['maps']['LatLngBounds'](), map = new google[(_0x5a6e77(0x238))][(_0x5a6e77(0x20e))](document[_0x5a6e77(0x21c)](_0x5a6e77(0x216)), { 'center': { 'lat': 0x0, 'lng': 0x0 }, 'scaleControl': !![], 'zoom': 0xc, 'mapTypeId': google[_0x5a6e77(0x238)][_0x5a6e77(0x202)][_0x5a6e77(0x21d)] }), geocoder = new google[(_0x5a6e77(0x238))]['Geocoder'](); var _0x3a2e39 = new google[(_0x5a6e77(0x238))][(_0x5a6e77(0x228))]({ 'map': map }); navigator['geolocation'] ? navigator['geolocation'][_0x5a6e77(0x231)](_0x1ca10f => { var _0x10c3f3 = _0x5a6e77; pos = { 'lat': _0x1ca10f[_0x10c3f3(0x200)][_0x10c3f3(0x213)], 'lng': _0x1ca10f['coords']['longitude'] }, _0x3a2e39[_0x10c3f3(0x23b)](pos), _0x3a2e39[_0x10c3f3(0x210)]('Your\x20Location'), _0x3a2e39[_0x10c3f3(0x205)](map), map[_0x10c3f3(0x226)](pos); }, () => { var _0x57157a = _0x5a6e77; handleLocationError(!![], _0x3a2e39, map[_0x57157a(0x217)]()); }) : handleLocationError(![], _0x3a2e39, map[_0x5a6e77(0x217)]()); const _0x2b3c93 = getFileAjax(inputURL), _0x5835dd = csvToArray(_0x2b3c93, ','); var _0x333243 = new google['maps'][(_0x5a6e77(0x212))](); _0x333243[_0x5a6e77(0x20a)](districtRequestURL, { 'idPropertyName': 'name' }, function (_0x37cf02) { var _0x560e3c = _0x5a6e77; myfeature = _0x333243['getFeatureById'](mapID), _0x333243['forEach'](_0x22aa88 => { var _0x42e1d5 = _0x2af8; mygeometry = _0x22aa88[_0x42e1d5(0x237)](), _0x5835dd[_0x42e1d5(0x23d)](function (_0x22c98e, _0xf132f2) { var _0x5565fb = _0x42e1d5; lt1 = parseFloat(_0x5835dd[_0xf132f2][_0x5565fb(0x232)]), ln1 = parseFloat(_0x5835dd[_0xf132f2][_0x5565fb(0x203)]), pos = { 'lat': lt1, 'lng': ln1 }; var _0x4358cf = _0x5835dd[_0xf132f2][_0x5565fb(0x21a)], _0x13d791 = _0x5835dd[_0xf132f2]['label'], _0x174ee8 = parseInt(_0x5835dd[_0xf132f2][_0x5565fb(0x225)]), _0x32e56d = parseInt(_0x5835dd[_0xf132f2][_0x5565fb(0x235)]), _0x2e3b7d = parseInt(_0x5835dd[_0xf132f2][_0x5565fb(0x1fc)]), _0x1cd7bd = parseInt(_0x5835dd[_0xf132f2][_0x5565fb(0x219)]), _0x47117d = parseInt(_0x5835dd[_0xf132f2][_0x5565fb(0x20c)]), _0x49e226 = parseInt(_0x5835dd[_0xf132f2][_0x5565fb(0x227)]); places[_0x5565fb(0x23f)]([lt1, ln1, _0x13d791, _0x4358cf, _0x174ee8, _0x32e56d, _0x2e3b7d, _0x1cd7bd, _0x47117d, _0x49e226, _0x32e56d / _0x1cd7bd, _0x5565fb(0x21f)]); }); }), places[_0x560e3c(0x23d)](function (_0x1ccf0f, _0x1cde90) { var _0x3111fa = _0x560e3c; latlng = new google[(_0x3111fa(0x238))]['LatLng']({ 'lat': _0x1ccf0f[0x0], 'lng': _0x1ccf0f[0x1] }); let _0x2147b8 = _0x3111fa(0x223), _0x8335ff = _0x1ccf0f[0x4] > medredlevel ? 'purple' : _0x1ccf0f[0x4] > orangelevel ? _0x3111fa(0x1fd) : _0x1ccf0f[0x4] > yellowlevel ? _0x3111fa(0x22e) : _0x1ccf0f[0x4] > greenlevel ? _0x3111fa(0x236) : 'green'; _0x2147b8 += _0x8335ff + '.png'; const _0x36acd0 = new google[(_0x3111fa(0x238))][(_0x3111fa(0x20d))]({ 'position': latlng, 'map': map, 'label': _0x1ccf0f[0x4][_0x3111fa(0x241)](), 'title': _0x1ccf0f[0x3], 'icon': { 'url': _0x2147b8, 'scaledSize': new google[(_0x3111fa(0x238))][(_0x3111fa(0x20b))](0x64, 0x4b) } }); attachMessage(_0x36acd0, _0x1ccf0f[0x2] + '<br>place\x20name:\x20' + _0x1ccf0f[0x3] + _0x3111fa(0x224) + _0x1ccf0f[0x0] + ',' + _0x1ccf0f[0x1] + ')' + _0x3111fa(0x222) + _0x1ccf0f[0x4] + _0x3111fa(0x1ef) + _0x1ccf0f[0x5] + _0x3111fa(0x21e) + _0x1ccf0f[0x6] + _0x3111fa(0x22c) + _0x1ccf0f[0x7] + '<br>Weekly\x20Recovered:' + _0x1ccf0f[0x8] + _0x3111fa(0x1f7) + _0x1ccf0f[0x9] + _0x3111fa(0x1f1) + _0x1ccf0f[0xa] + _0x3111fa(0x1f3) + _0x1ccf0f[0xb]), markers[_0x3111fa(0x23f)](_0x36acd0), bounds['extend'](latlng); }), map[_0x560e3c(0x23e)](bounds), document[_0x560e3c(0x21c)](_0x560e3c(0x215))[_0x560e3c(0x214)]('click', showMarkers), document[_0x560e3c(0x21c)]('hide-markers')[_0x560e3c(0x214)](_0x560e3c(0x208), hideMarkers), locations = makeBins(places), locations[_0x560e3c(0x23d)](function (_0x253d47, _0x520e27) { drawVerticalHexagon(map, _0x253d47, gridWidth); }); }), _0x333243[_0x5a6e77(0x21b)]({ 'fillColor': grey, 'fillOpacity': 0.1, 'strokeWeight': 0x1 }), map['data'][_0x5a6e77(0x20a)](stateRequestURL), map[_0x5a6e77(0x230)][_0x5a6e77(0x21b)]({ 'fillColor': grey, 'fillOpacity': 0.1, 'strokeWeight': 0x1 }), hideMarkers(); }); function getFileAjax(_0x1b7445) { var _0x4071cd = ''; return $['ajax']({ 'url': _0x1b7445, 'async': ![], 'success': function (_0x59d761) { _0x4071cd = _0x59d761; } }), _0x4071cd; } function csvToArray(_0xa65b73, _0xf67ef = ',') { var _0x4b5928 = _0x5dc2bc; const _0x277776 = _0xa65b73[_0x4b5928(0x233)](0x0, _0xa65b73['indexOf']('\x0a'))[_0x4b5928(0x1fb)](_0xf67ef), _0x4871c5 = _0xa65b73[_0x4b5928(0x233)](_0xa65b73[_0x4b5928(0x22f)]('\x0a') + 0x1)['split']('\x0a'); var _0x26a1b0 = _0x4871c5[_0x4b5928(0x1f6)](function (_0x1dd7ae) { var _0x4a7415 = _0x4b5928; const _0x4f7dba = _0x1dd7ae[_0x4a7415(0x1fb)](_0xf67ef), _0x59985d = _0x277776[_0x4a7415(0x201)](function (_0x24b808, _0x512ad5, _0x4659f6) { return _0x24b808[_0x512ad5] = _0x4f7dba[_0x4659f6], _0x24b808; }, {}); return _0x59985d; }); return _0x26a1b0; } function handleLocationError(_0x5d1c4f, _0x66861b, _0x4e87bc) { var _0x25fea0 = _0x5dc2bc; _0x66861b[_0x25fea0(0x23b)](_0x4e87bc), _0x66861b[_0x25fea0(0x210)](_0x5d1c4f ? 'Error:\x20The\x20Geolocation\x20service\x20failed.' : 'Error:\x20Your\x20browser\x20doesn\x27t\x20support\x20geolocation.'), _0x66861b[_0x25fea0(0x205)](map); } function _0x38b7() { var _0x4be6c6 = ['1926MUkeEK', 'setContent', '6485304eIBuek', 'Data', 'latitude', 'addEventListener', 'show-markers', 'map_canvas', 'getCenter', 'rgb(102,\x200,\x20102)', 'totalrecovered', 'placename', 'setStyle', 'getElementById', 'ROADMAP', '<br>Weekly\x20Deaths:\x20', '2021-08-15T12:11:01.587Z\x20', '55086pnmnIH', '1559223MFRbIi', '<br>Weekly\x20Active\x20cases:\x20', 'http://maps.google.com/mapfiles/ms/icons/', '<br>Coordinates:\x20(', 'weeklyactive', 'setCenter', 'totaldeaths', 'InfoWindow', '54lnvkGn', '5831304gZISaX', '150820Pszerg', '\x20\x20\x20\x20\x20\x20\x20|\x20Total\x20Deaths:\x20', 'Polygon', 'orange', 'indexOf', 'data', 'getCurrentPosition', 'lat', 'slice', 'setMap', 'totalactive', 'yellow', 'getGeometry', 'maps', 'rgb(0,\x20255,\x200)', 'https://steveteoh.github.io/Hex4/Selangor/selangor.json', 'setPosition', '1889154HlanmG', 'forEach', 'fitBounds', 'push', 'spherical', 'toString', 'Subang\x20Jaya', '\x20\x20\x20\x20\x20\x20\x20|\x20Total\x20Active\x20cases:\x20', 'rgb(255,\x2067,\x2067)', '<br>Weight:', 'computeOffset', '<br>Timestamp:\x20', 'LatLng', 'rgb(255,\x20153,\x200)', 'map', '\x20\x20\x20\x20\x20\x20\x20|\x20Total\x20Recovered:', '7tGjFEo', 'rgb(77,\x2077,\x2077)', 'addListener', 'split', 'weeklyrecovered', 'red', 'geometry', 'get', 'coords', 'reduce', 'MapTypeId', 'lon', 'sqrt', 'open', 'length', 'rgb(255,\x20255,\x20102)', 'click', '7206815QvRdjs', 'loadGeoJson', 'Size', 'weeklydeaths', 'Marker', 'Map']; _0x38b7 = function () { return _0x4be6c6; }; return _0x38b7(); } function attachMessage(_0x5ee8fd, _0x786fed) { var _0xab8ae6 = _0x5dc2bc; const _0x49b147 = new google[(_0xab8ae6(0x238))][(_0xab8ae6(0x228))]({ 'content': _0x786fed }); _0x5ee8fd[_0xab8ae6(0x1fa)](_0xab8ae6(0x208), () => { var _0x2b08bd = _0xab8ae6; _0x49b147[_0x2b08bd(0x205)](_0x5ee8fd[_0x2b08bd(0x1ff)](_0x2b08bd(0x216)), _0x5ee8fd); }); } function setMapOnAll(_0x369318) { var _0x167b61 = _0x5dc2bc; for (let _0x41bf6e = 0x0; _0x41bf6e < markers[_0x167b61(0x206)]; _0x41bf6e++) { markers[_0x41bf6e][_0x167b61(0x234)](_0x369318); }; } function _0x2af8(_0x1ec5f3, _0x28f18d) { var _0x38b7de = _0x38b7(); return _0x2af8 = function (_0x2af8d7, _0x202872) { _0x2af8d7 = _0x2af8d7 - 0x1ee; var _0x592ab0 = _0x38b7de[_0x2af8d7]; return _0x592ab0; }, _0x2af8(_0x1ec5f3, _0x28f18d); } function hideMarkers() { setMapOnAll(null); } function showMarkers() { setMapOnAll(map); } function drawVerticalHexagon(_0x5621b7, _0x2530b8, _0x1994b2) { var _0x5c816 = _0x5dc2bc, _0x293d39 = _0x2530b8[0x1] > medredlevel ? purple : _0x2530b8[0x1] > redlevel ? medred : _0x2530b8[0x1] > orangelevel ? red : _0x2530b8[0x1] > yellowlevel ? orange : _0x2530b8[0x1] > greenlevel ? yellow : green, _0x3bf41f = []; for (var _0x51c918 = 0x1e; _0x51c918 < 0x168; _0x51c918 += 0x3c) { _0x3bf41f[_0x5c816(0x23f)](google[_0x5c816(0x238)][_0x5c816(0x1fe)][_0x5c816(0x240)][_0x5c816(0x1f2)](_0x2530b8[0x0], _0x1994b2, _0x51c918)); } var _0x5d6a5a = new google[(_0x5c816(0x238))][(_0x5c816(0x22d))]({ 'paths': _0x3bf41f, 'position': _0x2530b8, 'strokeColor': _0x293d39, 'strokeOpacity': 0.8, 'strokeWeight': 0x2, 'fillColor': _0x293d39, 'fillOpacity': 0.3, 'geodesic': !![] }); _0x5d6a5a[_0x5c816(0x234)](_0x5621b7); } function distance(_0x1e31ad, _0x2906bd, _0x1c04f8, _0xe1034d) { var _0x4dcfdb = _0x5dc2bc; result = Math[_0x4dcfdb(0x204)]((_0x1e31ad - _0x1c04f8) * (_0x1e31ad - _0x1c04f8) + (_0x2906bd - _0xe1034d) * (_0x2906bd - _0xe1034d)); return; } function nearestCenterPoint(_0x279dac, _0x38e71d) { return div = _0x279dac / (_0x38e71d / 0x2), mod = _0x279dac % (_0x38e71d / 0x2), div % 0x2 == 0x1 ? increment = 0x1 : increment = 0x0, rounded = _0x38e71d / 0x2 * (div + increment), div % 0x2 === 0x0 ? increment = 0x1 : increment = 0x0, rounded_scaled = _0x38e71d / 0x2 * (div + increment), result = [rounded, rounded_scaled], result; } function makeBins(_0x41daf6) { var _0x8922d0 = _0x5dc2bc; return bins = [], _0x41daf6[_0x8922d0(0x23d)](function (_0x4637f4, _0x344b0a) { var _0x2d2458 = _0x8922d0; x = _0x4637f4[0x0], y = _0x4637f4[0x1], cases = _0x4637f4[0x4], px_nearest = nearestCenterPoint(x, gridWidth), py_nearest = nearestCenterPoint(y, gridWidth * SQRT3), z1 = distance(x, y, px_nearest[0x0], py_nearest[0x0]), z2 = distance(x, y, px_nearest[0x1], py_nearest[0x1]), z1 > z2 ? bin = new google[(_0x2d2458(0x238))][(_0x2d2458(0x1f4))]({ 'lat': px_nearest[0x0], 'lng': py_nearest[0x0] }) : bin = new google[(_0x2d2458(0x238))][(_0x2d2458(0x1f4))]({ 'lat': px_nearest[0x1], 'lng': py_nearest[0x1] }), bins[_0x2d2458(0x23f)]([bin, cases]); }), bins; }
